name: 🚀 Deploy NITP Website (Zero Downtime)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Show deployment info
      run: |
        echo "🔗 Repository: ${{ github.repository }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"

    - name: 📤 Upload Code to Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "."
        target: "/root/nitp-main-website-new"
        rm: true

    - name: 🚀 Deploy with Zero Downtime + Auto Rollback
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          echo "🔄 Starting zero-downtime deployment..."
          echo "📅 Deployment Time: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          # Configuration
          APP_NAME="nitp-main-website"
          TEMP_APP_NAME="nitp-temp"
          LIVE_PORT="3002"
          TEMP_PORT="3102"
          HEALTH_ENDPOINT="/api/health"
          HEALTH_TIMEOUT=30
          
          # Function to log with timestamp
          log() {
            echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
          }
          
          # Function to check if container exists
          container_exists() {
            docker ps -a --format '{{.Names}}' | grep -q "^$1$"
          }
          
          # Function to check if container is running
          container_running() {
            docker ps --format '{{.Names}}' | grep -q "^$1$"
          }
          
          # Function to stop and remove container safely
          cleanup_container() {
            local container_name=$1
            if container_exists $container_name; then
              log "🛑 Stopping container: $container_name"
              docker stop $container_name || true
              log "🗑️ Removing container: $container_name"
              docker rm $container_name || true
            fi
          }
          
          # Function to check application health
          check_health() {
            local port=$1
            local retries=0
            local max_retries=6
            
            log "🏥 Checking health on port $port..."
            
            while [ $retries -lt $max_retries ]; do
              if curl -f -s --max-time 5 "http://localhost:$port$HEALTH_ENDPOINT" > /dev/null 2>&1; then
                log "${GREEN}✅ Health check passed on port $port${NC}"
                return 0
              fi
              
              retries=$((retries + 1))
              log "${YELLOW}⏳ Health check attempt $retries/$max_retries failed, retrying in 5s...${NC}"
              sleep 5
            done
            
            log "${RED}❌ Health check failed after $max_retries attempts${NC}"
            return 1
          }
          
          # Function to rollback
          rollback() {
            log "${RED}🔄 ROLLING BACK TO PREVIOUS VERSION...${NC}"
            
            # Clean up failed deployment
            cleanup_container $TEMP_APP_NAME
            
            # Restore backup if it exists
            if [ -d "/root/nitp-docker-backup" ]; then
              log "📁 Restoring from backup..."
              rm -rf /root/nitp-docker-current
              cp -r /root/nitp-docker-backup /root/nitp-docker-current
              cd /root/nitp-docker-current
              
              # Build and start old version
              log "🔨 Building rollback image..."
              docker build -t $APP_NAME-rollback . || {
                log "${RED}❌ Failed to build rollback image${NC}"
                exit 1
              }
              
              # Ensure live container is stopped
              cleanup_container $APP_NAME
              
              log "🚀 Starting rollback container..."
              docker run -d --restart=always -p $LIVE_PORT:3002 --name $APP_NAME $APP_NAME-rollback || {
                log "${RED}❌ Failed to start rollback container${NC}"
                exit 1
              }
              
              # Verify rollback health
              if check_health $LIVE_PORT; then
                log "${GREEN}✅ Rollback successful!${NC}"
              else
                log "${RED}❌ Rollback health check failed${NC}"
                exit 1
              fi
            else
              log "${RED}❌ No backup found for rollback${NC}"
              exit 1
            fi
          }
          
          # Main deployment logic
          main() {
            # Create backup of current version
            log "💾 Creating backup of current version..."
            rm -rf /root/nitp-docker-backup
            if [ -d "/root/nitp-docker-current" ]; then
              cp -r /root/nitp-docker-current /root/nitp-docker-backup || true
              log "✅ Backup created successfully"
            else
              log "${YELLOW}⚠️ No current version found to backup${NC}"
            fi
            
            # Move new version into place
            log "📁 Moving new version into place..."
            rm -rf /root/nitp-docker-current
            mv /root/nitp-main-website-new /root/nitp-docker-current
            cd /root/nitp-docker-current
            
            # Build new Docker image
            log "🔨 Building new Docker image with Node.js 20..."
            docker build -t $APP_NAME-new . || {
              log "${RED}❌ Docker build failed${NC}"
              rollback
              exit 1
            }
            
            # Verify Node.js version in the new image
            log "🔍 Verifying Node.js version in new image..."
            node_version=$(docker run --rm $APP_NAME-new node --version 2>/dev/null || echo "unknown")
            log "📊 Node.js version: $node_version"
            
            if [[ $node_version == v20* ]]; then
              log "${GREEN}✅ Correct Node.js 20 version detected${NC}"
            else
              log "${YELLOW}⚠️ Unexpected Node.js version: $node_version${NC}"
            fi
            
            # Clean up any existing temp container
            cleanup_container $TEMP_APP_NAME
            
            # Run temp container for testing
            log "🧪 Starting temporary container on port $TEMP_PORT..."
            docker run -d -p $TEMP_PORT:3002 --name $TEMP_APP_NAME $APP_NAME-new || {
              log "${RED}❌ Failed to start temporary container${NC}"
              rollback
              exit 1
            }
            
            # Wait for container to fully start
            log "⏳ Waiting for container to initialize..."
            sleep 10
            
            # Health check on temp container
            if check_health $TEMP_PORT; then
              log "${GREEN}✅ New version passed health check!${NC}"
              
              # Stop old live container
              log "🛑 Stopping old live container..."
              cleanup_container $APP_NAME
              
              # Start new container on live port
              log "🚀 Starting new container on live port $LIVE_PORT..."
              docker run -d --restart=always -p $LIVE_PORT:3002 --name $APP_NAME $APP_NAME-new || {
                log "${RED}❌ Failed to start new live container${NC}"
                rollback
                exit 1
              }
              
              # Final health check on live port
              log "🔍 Final health check on live port..."
              if check_health $LIVE_PORT; then
                # Clean up temp container
                cleanup_container $TEMP_APP_NAME
                
                # Enhanced cleanup - remove old images and optimize storage
                log "🧹 Performing enhanced cleanup..."
                
                # Remove unused images older than 24 hours (keep recent ones)
                docker images --filter "dangling=true" -q | xargs -r docker rmi 2>/dev/null || true
                
                # Clean up Docker system (safe cleanup)
                docker system prune -f 2>/dev/null || true
                
                # Remove old NITP images (keep last 3)
                old_images=$(docker images --filter "reference=*nitp*" --format "{{.ID}} {{.CreatedAt}}" | \
                           sort -k2 -r | tail -n +4 | awk '{print $1}')
                if [ -n "$old_images" ]; then
                  echo "$old_images" | xargs -r docker rmi 2>/dev/null || true
                  log "🗑️ Removed old NITP images"
                fi
                
                log "${GREEN}🎉 DEPLOYMENT SUCCESSFUL! 🎉${NC}"
                log "${GREEN}✅ Application is live on port $LIVE_PORT${NC}"
                log "${GREEN}✅ Zero downtime deployment completed${NC}"
                log "${GREEN}✅ Automatic cleanup completed${NC}"
                
                # Send success notification (optional)
                echo "Deployment successful at $(date)" > /tmp/deploy_status
              else
                log "${RED}❌ Final health check failed${NC}"
                rollback
                exit 1
              fi
            else
              log "${RED}❌ Health check failed on temporary container${NC}"
              rollback
              exit 1
            fi
          }
          
          # Execute main deployment
          main
          
          log "📊 Deployment Summary:"
          log "🔗 Commit: ${{ github.sha }}"
          log "🌿 Branch: ${{ github.ref_name }}"
          log "⏰ Time: $(date)"
          log "🚀 Status: SUCCESS"

    - name: 📋 Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "🌐 Your website should be live at your domain"
          echo "🏥 Health check: http://your-domain/api/health"
        else
          echo "❌ Deployment failed!"
          echo "🔄 Automatic rollback should have been triggered"
        fi

    # Optional: Slack notification (uncomment and add SLACK_WEBHOOK secret)
    # - name: 📢 Notify Slack
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: |
    #       🚀 NITP Website Deployment ${{ job.status }}
    #       📝 Commit: ${{ github.sha }}
    #       👤 Author: ${{ github.actor }}
    #       🌿 Branch: ${{ github.ref_name }}
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    # Optional: Discord notification (uncomment and add DISCORD_WEBHOOK secret)  
    # - name: 📢 Notify Discord
    #   if: always()
    #   uses: Ilshidur/action-discord@master
    #   with:
    #     args: |
    #       🚀 **NITP Website Deployment ${{ job.status }}**
    #       📝 Commit: `${{ github.sha }}`
    #       👤 Author: ${{ github.actor }}
    #       🌿 Branch: ${{ github.ref_name }}
    #       🔗 Repository: ${{ github.repository }}
    #   env:
    #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
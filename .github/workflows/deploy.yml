name: üê≥ Docker Hub Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîç Show deployment info
      run: |
        echo "üîó Repository: ${{ github.repository }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üë§ Actor: ${{ github.actor }}"

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME_Aashish }}
        password: ${{ secrets.DOCKERHUB_Password_Aashish }}

    - name: üìã Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME_Aashish }}/nitp-main-website
        tags: |
          type=raw,value=latest
          type=sha,prefix=

    - name: üî® Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: üöÄ Deploy to Server & prune on success
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          echo "Connected to server"
          
          # Existing deploy script (pulls and restarts container)
          if [ -x ./run-nitp-main.sh ]; then
            ./run-nitp-main.sh
          else
            echo "‚ö†Ô∏è run-nitp-main.sh not found or not executable; proceeding without it"
          fi
          
          echo "‚è≥ Waiting for app health (HTTP) to become ready..."
          READY=0
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:3002/api/health >/dev/null 2>&1; then
              READY=1
              echo "‚úÖ Health endpoint is responding."
              break
            fi
            echo "...retry $i/30"
            sleep 5
          done
          
          if [ "$READY" -ne 1 ]; then
            echo "‚ùå Deployment did not become healthy in time. Showing recent container info..."
            docker ps
            # Try to print logs if the known container name exists
            if docker ps -a --format '{{.Names}}' | grep -q '^nitp-main-website$'; then
              docker logs --tail 200 nitp-main-website || true
            fi
            exit 1
          fi
          
          echo "üßπ Pruning unused Docker resources (images/volumes/networks/containers not in use)..."
          docker system prune -a --volumes -f
          echo "‚úÖ Deployment complete and old artifacts pruned."
